openapi: "3.0.2"
info:
  title: "Rendez-Vous API"
  version: "0.0"
  description: |
    Документ содержит описание API сервиса Rendez Vous, использующегося в мобильных приложениях на платформах Android и iOS. Описанию подлежат все модели данных с полным набором полей, а также все методы, используемые для клиент-серверного взаимодействия.
    
    Список неготовых методов с приоритетом и статусом доработки расположен в этом [документе](https://docs.google.com/spreadsheets/d/1nf7icFh4sOIsW2yZzy5-LtOcnSewEMm7iAPwjAsR1p4). 
    
    # Общие параметры
    В каждом запросе из представленной спецификации присутствуют следующие
    компоненты:

    ### Headers
    <details>TODO: Описать хедеры/куки.</details>

    # Авторизация
    <details>TODO: Описать авторизацию</details>

    # Кэширование
    <details>Используется простое кеширование на стороне клиента с помощью URL-cache.</details>

    # Пагинация
    <details>Rendez-Vous API поддерживает механизм пагинации limit-offset.
    Каждый пагинируемый запрос должен url-параметрами принимать `limit` и
    `offset`, а в теле ответа возвращать metadata. 
    
    `limit` отвечает за количество элементов в пачке пагинации, 
    
    `offset` отвечает за текущий сдвиг пагинации.

    В ответе запроса в объекте `metadata`,  мы получаем `limit` и `offset` из параметров запроса (для верификации) и параметр `count` - общее количество элементов списка.

    То есть, обычный запрос на пагинацию может выглядеть следующим образом: 

    `GET /users?limit=20&offset=40` - выдача 20 пользователей начиная с 40-го.

    Ответ на такой запрос выглядит так:
        
        {
          "users": [...],
          "metadata": { 
            "limit": 20,
            "offset": 40,
            "count": 1200
          }
        }
    </details>
    # Ошибки 
    <details>
    <summary>Описание</summary>
    Сервер возвращает ответ 200 с массивом возможных ошибок:

        { 
          "errors": [
            { 
              "code": 100
              "text": "Неверный формат JSON от клиента, ошибка пейлоада"
              "data": "85"
              "payment_data": {
                "transactonId": "string",
                "paReq": "string",
                "acsUrl": "string"
              }
            }
          ]
        }

    Ошибки состоят из специфического кода `code` ( для идентификации ошибки), текста `text`(отображаемого на клиенте), 
    и опционального поля `data`, в котором может располагаться строка с примитивом или еще какими-то данными, которые клиенту следует отобразить.
    Например, это может быть количество секунд, через которые можно повторно отправить смс, получаемое при ошибке *SmsCodeRequestTooFast*.
    
    В единственном случае (необходимость подтвердить платеж по 3D Secure), 
    ошибка будет содержать так же данные `payment_data`, необходимые для механизма 3Ds.  
    </details>
    
    <details>
    <summary>Специфические коды ошибок</summary>
    * `100` - BadJson, неверный формат JSON от клиента, ошибка пейлоада

    * `101` - SmsCodeInvalid - неверный смс-код
    
    * `102` - LoginInfoInvalid - неверный логин или пароль
    
    * `103` - AccountAlreadyExists - Попытка зарегистрировать уже существующий аккаунт 

    * `104` - AccountNotExists - Попытка входа в несуществующий аккаунт
    
    * `105` - EmailUsed - Email, на который пользователь пытается сменить текущий, уже привязан к другому аккаунту

    * `106` - PhoneUsed - Телефон, на который пользователь пытается сменить текущий, уже привязан к другому аккаунту

    * `107` - UnreachableAddress - адрес не входит в зону доставки

    * `108` - PaymentConfirmationNeeded - необходимость подтвердить платеж через 3D Secure

    * `109` - BadCardDetails - платеж отклонен, некорректные данные карты

    * `110` - IsufficientFunds - платеж отклонен, недостаточно средств 
    
    * `111` - IncorrectPrice -  неверная цена заказа, в ответе приходит серверная цена
    
    * `112` - InvalidGeoPosition -  неверная геопозиция пользователя, не получается ассоциировать ее с доступными городами
    
    * `113` - ProductsLimitExceed - лимит товаров в заказе (макс. 5 товаров на один заказ)  

    * `114` - OrdersLimitExceed - лимит заказов на профиль пользователя (не более 2 заказов с оплатой при получении / не более 10 заказов с оплатой онлайн)  
    
    * `115` - PasswordNotMatch - при попытке смены пароля введен неверный старый пароль
    
    * `116` - PromocodeInvalid - промо-код не существует либо не может быть применен
    
    * `117` - UnsupportedAppVersion - версия приложения устарела и не поддерживается сервером.

    * `118` - AlreadyAuthorized - вы уже авторизованы, необходимо почистить куки.

    * `119` - EmptyLoginFields - Поля при попытке логина пусты. Необходимо ввести адрес электронной почты или номер телефона или номер карты Rendez-Vous.

    * `120` - EmptyLoginPassword - Пустой пароль при попытке логина. Вы не ввели пароль.

    * `121` - UnsupportedRoleSeller - Пользователь с ролью "Продавец" не может быть авторизован в приложении.

    * `122` - UnsupportedRoleOperator - Пользователь с ролью "Оператор" не может быть авторизован в приложении.

    * `123` - AccountBlocked - Данный аккаунт заблокирован

    * `124` - UnexpectedAuthError - Произошла ошибка при авторизации

    * `125` - Unauthorized - пользователь не авторизован для просмотра данного контента, требуется логин

    * `126` - AccountNotExists - Попытка входа в несуществующий аккаунт

    * `127` - EmptyRequiredField - Не заполнено обязательное поле

    * `128` - SmsCodeRequestTooFast - не прошел таймаут от предыдущего запроса смс-кода. В поле data приходит секунд до появления возможности отправить код повторно. 

    * `129` - SmsCodeRequestFailed - Отправка смс не удалась. Пожалуйста, попробуйте позже.

    * `130` - PhoneFormatInvalid - Неверный формат номера телефона.

    * `131` - NameFormatInvalid -  Неверный формат ФИО.

    * `132` - DateFormatInvalid - Неверный формат даты.

    * `133` - UnsupportedFootSize - Неправильно указан размер.

    * `134` - UnsupportedGender - Неправильно указан пол.

    * `135` - UnexpectedUpdateProfileError - Ошибка при обновлении профиля.

    * `136` - Некорректно задан идентификатор.

    * `137` - Неверный формат электронной почты.

    * `138` - Неверный формат имени.

    * `139` - Вы не указали новый пароль.

    * `140` - Не удалось совершить операцию.

    * `141` - У пользователя не привязана карта лояльности.

    * `142` - Не удалось сменить телефон.

    * `143` - Регион отсутствует в списке.

    * `144` - Город не принадлежит указанному региону.

    * `145` - Неверный формат названия улицы.

    * `146` - Неверный формат почтового индекса.

    * `147` - Вы не можете добавлять больше 10 адресов.

    * `148` - Модель не найдена.

    * `149` - Некорректно задан раздел каталога.

    * `150` - Бренд не найден.

    * `401` - Unauthorized - пользователь не авторизован для просмотра данного контента, требуется логин
    
    * `404` - DataNotFound - данные не найдены
    </details>

    <details>
    <summary>@Deprecated старый механизм обработки ошибок</summary>    
    Сервер возвращает ответ 200 с id равным -1 и текстом ошибки:
    
        {
          "status":{
            "id":-1,
            "text":{
              "Errors":{
                "global":"\u041e\u0431\u043d\u043e\u0432\u0438\u0442\u0435 \u0412\u0430\u0448\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435"
              }
            }
          }
        }
    </details>

servers:
- url: https://rendez-vous.ru/api_v3/
  description: Test server
- url: https://rendez-vous.ru/api_v3/
  description: Production Server

security:
  - AuthApiKey: []

tags: 
  - name: Авторизация
  - name: Профиль
  - name: Магазины
  - name: Населенные пункты
  - name: Адреса
  - name: Фид
  - name: Каталог
  - name: Поиск
  - name: Бренды
  - name: Заказы
  - name: Корзина
  - name: Избранное
  - name: Общее
paths:
  /register/sms_code:
    get:
      summary: Получение смс-кода для регистрации
      description: | 
        Метод для получения кода смс-кода на указанный телефон, используется при регистрации 
      security: []
      tags: [Авторизация]
      parameters: 
        - name: phone
          in: query
          description: Номер телефона, на который получаем код, например 79001234567
          schema:
            type: string
            example: "79001234567"
      responses: 
        '200':
          description: Успешная отправка смс-кода
        '400':
            description: | 
              * 103 - Попытка зарегистрировать существующий аккаунт
              * 128 - Слишком частые попытки отправить смс-код
            content:
              application/json:
                schema:
                  properties:
                    code: 
                      type: integer
                      example: 103

  /register/sms_code/verify:
      post: 
        summary: Подтверждение смс-кода при регистрации
        security: []
        tags: [Авторизация]
        requestBody: 
          required: true
          content:
            application/json: 
              schema:
                $ref: '#/components/schemas/VerifyPhoneRegisterRequest'
        responses: 
          '200':
            description: Положительный ответ.
          '400':
            description: Неверный смс-код
            content:
              application/json:
                schema:
                  properties:
                    code: 
                      type: integer
                      example: 101

  /register:
      post: 
        summary: Регистрация в приложении
        description: |
          Регистрация в приложении. 
          В качестве ответа мы получаем свежесозданный профиль.
          Если профиль уже существует - получаем ошибку.
        security: []
        tags: [Авторизация]
        requestBody: 
          required: true
          content:
            application/json: 
              schema:
                $ref: '#/components/schemas/RegisterRequest'
        responses: 
          '200':
            description: Положительный ответ, получение токенов и профиля пользователя.
            content: 
              application/json: 
                schema: 
                    $ref: '#/components/schemas/AuthResponse'
          '400':
            description: Попытка зарегистрировать уже существующий аккаунт
            content:
              application/json:
                schema:
                  properties:
                    code:
                      type: integer
                      example: 103

  /login:
    post:
      tags: [Авторизация]
      security: []
      summary: Авторизация/вход в приложение
      description: За основу принят метод api_v2 - authv2
      requestBody:
        description: |
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        '200':
          description: "Положительный ответ"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"

#TODO: убрать явную необходимость пробрасывать параметр userId в query.
  /logout:
    post: 
      summary: Выход из приложения
      tags: [Авторизация]
      responses:
        '200': 
          description: "Положительный ответ, выход из аккаунта"
        '401':
          $ref: '#/components/responses/Unauthorized'

  /recover_password:
    post: 
      tags: [Авторизация]
      security: []
      summary: Восстановление пароля
      requestBody:
        description: | 
          Тело запроса на восстановление пароля. 
          Может содержать либо email, либо телефон. 
        content: 
          application/json: 
            schema:
              $ref: "#/components/schemas/RecoverPasswordBody"
      responses: 
        '200': 
            description: "Положительный ответ, отправлено сообщение с временным паролем"
        '400':
          description: Аккаунт не существует
          content:
            application/json:
              schema:
                properties:
                  code: 
                    type: integer
                    example: 104

  /auth/refresh:
      post: 
        summary: Обновление токена для входа в приложение
        description: |
          Обновление токенов на основе Refresh-токена. 
          Вызывается при получении `401` или `125` ошибки на клиенте.        
          Refresh-токен одноразовый, поэтому при двух одинаковых запросах `/auth/refresh/` с одними данными вернутся разные значения: сначала 200 ОК, а затем ошибка.
        security: []
        tags: [Авторизация]
        requestBody: 
          required: true
          content:
            application/json: 
              schema:
                type: object
                properties:
                  token: 
                    $ref: '#/components/schemas/Token'
        responses: 
          '200':
            description: Положительный ответ, новый RefreshToken и обновление AuthToken в куках.
            content: 
              application/json: 
                schema: 
                    $ref: '#/components/schemas/RefreshTokenResponse'
          '125': 
            description: Токен невалиден, необходима принудительная авторизация по логину и паролю.
          '401': 
            description: Токен невалиден, необходима принудительная авторизация по логину и паролю.

  /profile:
    get: 
      summary: Получение профиля пользователя
      description: Получение профиля текущего авторизованного пользователя
      tags: [Профиль]
      responses: 
        '200':
          description: Положительный ответ с данными
          content:
            application/json: 
              schema:
                $ref: '#/components/schemas/Profile'
        '401':
          $ref: '#/components/responses/Unauthorized'
    patch:
      summary: Обновление данных профиля
      description: | 
        Заполнение данных о пользователе.  
      tags: [Профиль]
      requestBody:
        description: |
          Изменяемая информация профиля пользователя.
        required: true
        content:
            application/json: 
              schema:
                $ref: '#/components/schemas/ProfileInfo'
      responses: 
        '200':
          description: Положительный ответ, получение профиля пользователя
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /profile/update/sms_code/:
    get:
      summary: Получение смс-кода для обновления профиля
      description: | 
        Метод для получения смс-кода на указанный номер телефона.
        Используется для обновления номера телефона пользователя.
        Сначала отправляется данный запрос, после запрос на смену номера телефона.
      tags: [Профиль]
      parameters: 
        - name: phone
          in: query
          description: Номер телефона, на который получаем код, например 79001234567
          schema:
            type: string
            example: "79001234567"
      responses: 
        '200':
          description: Успешная отправка смс-кода
        '400':
          description: |
            Слишком частые попытки отправить смс-код
          content:
            application/json:
              schema:
                properties:  
                  code: 
                    example: 117
                  data: 
                    example: "85"

  /profile/update/phone:
      post: 
        summary: Смена номера телефона
        tags: [Профиль]
        description: |
          Метод для смены номера телефона.

          Необходимо передать новый номер телефона, на который было отправлено смс на предыдущем шаге,
          а также смс-код, который придет в результате вызова метода /profile/update/sms_code.
        requestBody: 
          required: true
          content:
            application/json: 
              schema:
                $ref: '#/components/schemas/UpdatePhoneRequest'
        responses: 
          '200':
            description: Положительный ответ.
          '400':
            description: | 
              * `101` - Неверный смс-код
              * `106` - Телефон, на который пользователь пытается сменить текущий, уже привязан к другому аккаунту.
            content:
              application/json:
                schema:
                  properties:
                    code: 
                      type: integer
                      example: 101

  /profile/update/email:
      post: 
        summary: Смена email
        tags: [Профиль]
        description: |
          Метод для смены email пользователя, в случае успешного выполнения - 
          на email придет ссылка, по которой пользователю необходимо пройти для верификации email.

          Не будет в MVP версии.
        requestBody: 
          required: true
          content:
            application/json: 
              schema:
                $ref: '#/components/schemas/UpdateEmailRequest'
        responses: 
          '200':
            description: Положительный ответ. На указанный email отправлена ссылка для верификации.
          '400':
            description: | 
              * `101` - Неверный смс-код
              * `105` - Email, на который пользователь пытается сменить текущий, уже привязан к другому аккаунту
            content:
              application/json:
                schema:
                  properties:
                    code: 
                      type: integer
                      example: 101

  /profile/password:
    post: 
      tags: [Профиль]
      summary: Запрос на изменение пароля
      requestBody:
          required: true
          content:
            application/json: 
              schema:
                type: object
                properties:
                  old_password: 
                    type: string
                    description: Старый пароль
                    example: "hello world"
                  new_password: 
                    type: string
                    description: Новый пароль
                    example: "world hello"

      responses: 
        '200': 
            description: "Положительный ответ, пароль сменен"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '400':
            description: Старый пароль неверен
            content:
              application/json:
                schema:
                  properties:
                    code: 
                      type: integer
                      example: 115

  /profile/feed:
    get: 
      summary: Получение фида профиля пользователя
      description: |
        Получение фида профиля пользователя. 
        Это информация, отображаемая на табе с личным кабинетом:
        профиль и количество заказов
      tags: [Профиль]
      responses: 
        '200':
          description: Положительный ответ с данными
          content:
            application/json: 
              schema:
                $ref: '#/components/schemas/ProfileFeedResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /profile/card/hash:
    get: 
      summary: Получение хеш-кода карты лояльности пользователя
      description: |
        Получение хеш-кода карты лояльности текущего авторизованного пользователя.
        Вынесено в отдельный метод, так как эта информация может часто меняться, 
        и ее следует постоянно перезапрашивать при заходе на таб профиля.
      tags: [Профиль]
      responses: 
        '200':
          description: Положительный ответ с данными
          content:
            application/json: 
              schema:
                $ref: '#/components/schemas/CardHashResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
  
  /profile/foot_sizes:
    get:
      summary: Получение доступных размеров ноги
      description: |
        Получение доступных для выбора размеров ноги, 
        которые пользователь может установить при изменении своего профиля.
      tags: [Профиль]
      responses:
        '200':
          description: Положительный ответ с данными
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FootSizesResponse'

  /feed:
    get: 
      summary: Получение ленты с новостями и предложениями
      description: | 
        Фид для главной ленты. 
        Содержит компоненты, из которых блочно собирается ui.
        Порядок прихода компонентов и их внешний вид определяется сервером.  
        Должен приходить таким образом, чтобы подборки товаров всегда разбавлялись эксклюзивным товаром/новостью/предложением.          
      tags: [Фид]
      parameters: 
        - $ref: '#/components/parameters/node'
      security: []
      responses: 
        '200':
          description: Положительный ответ с данными
          content:
            application/json: 
              schema:
                $ref: '#/components/schemas/FeedResponse'
 
  /sections: 
    get: 
      summary:  Получение списка секций товаров
      description: | 
      tags: [Каталог]
      security: []
      responses: 
        '200':
          description: Положительный ответ с данными
          content:
            application/json: 
              schema:
                $ref: '#/components/schemas/SectionsResponse'

  /products:
    get: 
      summary: Получение списка товаров
      description: | 
        В query-параметрах так же указываются фильтры
                
        Фильтры добавляются в запрос как пары `key[]=value`. 
        Ключом будет выступать имя фильтра, либо имена максимальных/минимальных границ для типа Range. 
        Значением будет являться id опции, либо code цвета при выборе цвета, либо значение границы при выборе размера.
        Квадратные скобки имени фильтра проставляются для корректной обработки нескольких значений с одинаковым ключом.

        Таким образом, запрос женского каталога с фильтрацией по двум брендам с id=670 и id=701 будет выглядеть следующим образом:
        `search?section=female&vendors[]=670&vendors[]=701`.
      tags: [Каталог]
      security: []
      parameters: 
        - $ref: '#/components/parameters/section_unrequired'
        - $ref: '#/components/parameters/collection_id'
        - $ref: "#/components/parameters/sort_type"
        - $ref: "#/components/parameters/brand"
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/offset"
      responses: 
        '200':
          description: Положительный ответ с данными
          content:
            application/json: 
              schema:
                $ref: '#/components/schemas/ProductsResponse'
  
  /products/{id}:
    get: 
      summary: Получение детальной информации о товаре
      tags: [Каталог]
      security: []
      parameters: 
        - $ref: '#/components/parameters/id'     
      responses: 
        '200':
          description: Положительный ответ с данными
          content:
            application/json: 
              schema:
                $ref: '#/components/schemas/ProductDetailResponse'
  
  /products/{id}/reviews:
    get: 
      summary: Получение отзывов о товаре
      tags: [Каталог]
      security: []
      parameters: 
        - $ref: '#/components/parameters/id'     
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/offset"
      responses: 
        '200':
          description: Положительный ответ с данными
          content:
            application/json: 
              schema:
                $ref: '#/components/schemas/ReviewsResponse'
  
  /products/{id}/certificates:
    get: 
      summary: Получение сертификатов товара
      tags: [Каталог]
      security: []
      parameters: 
        - $ref: '#/components/parameters/id'     
      responses: 
        '200':
          description: Положительный ответ с данными
          content:
            application/json: 
              schema:
                $ref: '#/components/schemas/Certificates'
  
  /sized-products/{id}/shops:
    get: 
      summary: Магазины, в которых товар в наличии 
      description: | 
        Получение списка розничных магазинов, содержащих товар с указанным идентификатором. 
        В качестве идентификатора передается id размера товара `product_size_id`. 
      tags: [Каталог]
      security: []
      parameters: 
        - $ref: '#/components/parameters/id'
        - name: city_id
          in: query
          required: true
          description: Идентификатор города, в котором необходимо осуществлять поиск магазинов 
          schema: 
            $ref: "#/components/schemas/Id"     
      responses: 
        '200':
          description: Положительный ответ с данными
          content:
            application/json: 
              schema:
                $ref: '#/components/schemas/ShopsWithProductResponse'

  /filters:
    get: 
      summary: Получение фильтров для каталога товаров
      description:  | 
        Получение фильтров динамическое, и зависит от запроса. 
        В запросе указываем один из параметров: section, collection_id, либо пару brand_id и section.  
      tags: [Каталог]
      security: []
      parameters: 
        - $ref: '#/components/parameters/section_unrequired'
        - $ref: '#/components/parameters/collection_id'
        - $ref: '#/components/parameters/brand'
      responses: 
        '200':
          description: Положительный ответ с данными
          content:
            application/json: 
              schema:
                $ref: '#/components/schemas/FilterResponse'
  
  /search:
    get: 
      summary: Получение товаров по поисковой строке
      description: |
        Получение товаров каталога по поисковой строке. 
        Запрос поддерживает сортировку (параметр sort_type) и фильтрацию по фильтр-строке.
        
        Фильтры добавляются в запрос как пары `key[]=value`. 
        Ключом будет выступать имя фильтра, либо имена максимальных/минимальных границ для типа Range. 
        Значением будет являться id опции, либо code цвета при выборе цвета, либо значение границы при выборе размера.
        Квадратные скобки имени фильтра проставляются для корректной обработки нескольких значений с одинаковым ключом.

        Таким образом, поисковый запрос со строкой "Обувь" и фильтрацией по двум брендам с id=670 и id=701 будет выглядеть следующим образом:
        `search?term=Обувь&vendors[]=670&vendors[]=701`.

        Запрос пагинируемый. 
      tags: [Поиск]
      security: []
      parameters: 
        - $ref: '#/components/parameters/term_required'
        - $ref: "#/components/parameters/search_sort_type"
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/offset"
      responses: 
        '200':
          description: Положительный ответ с данными
          content:
            application/json: 
              schema:
                $ref: '#/components/schemas/ProductsResponse'
  
  /search/hints:
    get: 
      summary: Получение подсказок при поиске
      tags: [Поиск]
      security: []
      parameters: 
        - $ref: '#/components/parameters/term_required'
      responses: 
        '200':
          description: Положительный ответ с данными
          content:
            application/json: 
              schema:
                $ref: '#/components/schemas/SearchHintsResponse'

  /search/filters:
    get: 
      summary: Получение фильтров для поисковой строки
      tags: [Поиск]
      security: []
      parameters: 
        - $ref: '#/components/parameters/term_required'
      responses: 
        '200':
          description: Положительный ответ с данными
          content:
            application/json: 
              schema:
                $ref: '#/components/schemas/FilterResponse'
  
  /brands:
    get: 
      summary: Получение списка брендов
      tags: [Бренды]
      security: []
      responses: 
        '200':
          description: Положительный ответ с данными
          content:
            application/json: 
              schema:
                $ref: '#/components/schemas/BrandsResponse'

  /brands/{id}:
    get: 
      summary: Получение бренда
      tags: [Бренды]
      security: []
      parameters: 
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/node'
        - name: has_top_products 
          in: query
          required: false
          description: | 
            Флаг, указывающий, необходимо ли добавить ли в запрос выдачу топовых товаров бренда. 
            По-умолчанию, топовые товары не передаются.
          schema: 
            enum: [0, 1]
            type: integer
            example: 0
      responses: 
        '200':
          description: Положительный ответ с данными
          content:
            application/json: 
              schema:
                $ref: '#/components/schemas/BrandResponse'


  /cities:
    get: 
      summary: Получение списка городов в которых есть магазины
      tags: [Магазины]
      security: []
      parameters: 
        - $ref: "#/components/parameters/shop_type"
      responses: 
        '200':
          description: Положительный ответ с данными
          content:
            application/json: 
              schema:
                $ref: '#/components/schemas/CitiesResponse'
  /cities/{id}/shops:
    get:
      summary: Получение списка магазинов города 
      tags: [Магазины]
      security: []
      parameters: 
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/shop_type"
      responses: 
        '200':
          description: Положительный ответ с данными
          content:
            application/json: 
              schema:
                $ref: '#/components/schemas/ShopsResponse'

  /cities/geopos:
    get: 
      summary: Получение города по геопозиции пользователя 
      tags: [Магазины]
      security: []
      parameters: 
        - $ref: "#/components/parameters/latitude"
        - $ref: "#/components/parameters/longitude"
        - $ref: "#/components/parameters/shop_type"
      responses: 
        '200':
          description: Положительный ответ с данными
          content:
            application/json: 
              schema:
                $ref: '#/components/schemas/City'
        '400':
          description: Неверная геопо смс-код
          content:
            application/json:
              schema:
                properties:
                  code: 
                    type: integer
                    example: 112
  /settlements: 
    get: 
      summary: Получение населенных пунктов по поисковой строке
      description: Получение самых густонаселенных поселений.
      tags: [Населенные пункты]
      parameters:
        - $ref: "#/components/parameters/term_required"
        - $ref: "#/components/parameters/settlement_delivery_type"
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/offset"
      responses:
        '200': 
          description: Положительный ответ с данными
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SettlementsPaginationResponse"

  /settlements/default: 
    get: 
      summary: Получение самых больших населенных пунктов
      tags: [Населенные пункты]
      responses:
        '200': 
          description: Положительный ответ с данными
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SettlementsResponse"

  /settlements/geopos:
    get: 
      summary: Получение населенного пункта по геопозиции пользователя 
      tags: [Населенные пункты]
      security: []
      parameters: 
        - $ref: "#/components/parameters/latitude"
        - $ref: "#/components/parameters/longitude"
        - $ref: "#/components/parameters/settlement_delivery_type"
      responses: 
        '200':
          description: Положительный ответ с данными
          content:
            application/json: 
              schema:
                $ref: '#/components/schemas/Settlement'
        '400':
          description: В вашем нас. пункте нету курьерских служб/ПВЗ
          content:
            application/json:
              schema:
                properties:
                  code: 
                    type: integer
                    example: 112

  /settlements/{id}/pickups: 
    get: 
      summary: Получение пунктов самовывоза для нас. пункта
      tags: [Населенные пункты]
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        '200': 
          description: Положительный ответ с данными
          content:
            application/json:
              schema:
                properties:
                  pick_up_points:
                    type: array
                    items: 
                      $ref: "#/components/schemas/PickUpPoint"

  /addresses: 
    post: 
      summary: Добавление нового адреса в профиль
      tags: [Адреса]
      requestBody:
        description: Новый адрес пользователя
        required: true
        content:
            application/json: 
              schema:
                $ref: '#/components/schemas/UserLocationRequest'
      responses:
          '200':
            description: Созданный адрес
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/UserLocation'
          '401':
            $ref: '#/components/responses/Unauthorized'  
    get:
      summary: Получение всех введенных адресов пользователя.
      description: | 
        Введенные адреса сортируются по дате доставки на них: 
        первым в списке будет тот, на который оформлялась последняя доставка. 
        Если доставок еще не было - сортируются по дате добавления. 
      tags: [Адреса]
      responses:
        '200': 
          description: Адреса
          content:
            application/json:
              schema:
                properties:
                  addresses: 
                    $ref: '#/components/schemas/UserLocations'
        '400':
          description: |
            Ошибка: 
            * `107` - адрес заказа не попадает в зону доставки.
          content:
            application/json: 
              schema:
                properties:
                  code:
                    type: integer
                    example: 107
        '401':
          $ref: '#/components/responses/Unauthorized'

  /addresses/autocomplete: 
    get:
      summary: Автодополнение введенного адреса
      tags: [Адреса]
      description: | 
        Автодополнение адреса на основе советов с сервера. 
        Адреса для автодополнения приходят со стороннего сервиса-поставщика адресов
      security: []
      parameters:
        - name: address
          in: query
          description: Пользовательская поисковая строка с адресом
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Адреса, соответствующие пользовательскому запросу
          content:
            application/json:
              schema:
                properties:
                  items:
                    type: array
                    items: 
                      $ref: '#/components/schemas/AutoCompleteLocation'

  /addresses/autocomplete/info: 
    get:
      summary: Получение полной  информацииоб адресе из подсказки
      tags: [Адреса]
      description: | 
        Получение всей информации об адресе из подсказки 
      security: []
      parameters:
        - name: suggestion
          in: query
          description: | 
            Автоподсказка с сервера, формируемая по принципу "description + address".
            
            Пример: Воронежская обл, г Воронеж, Ленинский р-н, ул. Ворошилова, 43
          required: true
          schema:
            type: string
          example:
      responses:
        '200':
          description: Информация об адресе из подсказки
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/AutoCompleteInfo'
        '400':
          description: |
            Ошибка: 
            * `107` - адрес из подсказки не попадает в зону доставки.
          content:
            application/json: 
              schema:
                properties:
                  code:
                    type: integer
                    example: 107
  
  /addresses/{id}:
    delete:
      summary: Удаление адреса из профиля
      tags: [Адреса]
      parameters: 
        - $ref: "#/components/parameters/id"
      responses: 
        '200':
          description: Адрес успешно удален.
        '401':
          $ref: "#/components/responses/Unauthorized"

  /addresses/{id}/couriers:
    get:
      summary: Информация о доставке заказа через курьеров
      description: |
        Информация о доставке заказа (текущей корзины авторизованного пользователя) через курьеров.
        Содержит список курьеров, и их интервалы доставки для данного адреса. 
      tags: [Адреса]
      parameters: 
        - $ref: "#/components/parameters/id"
      responses: 
        '200':
          description: Положительный ответ с данными
          content:
            application/json: 
              schema:
                $ref: '#/components/schemas/CourierDeliveryResponse'
        '401':
          $ref: "#/components/responses/Unauthorized"

  /orders:
    post:
      summary: Создание заказа  
      tags: [Заказы]
      requestBody:
        required: true
        content:
            application/json: 
              schema:
                $ref: '#/components/schemas/CreateOrderBody'
      responses:
        '200': 
          description: Заказ создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '401': 
          $ref: '#/components/responses/Unauthorized'
        '400': 
          description: | 
            Ошибка создания заказа. Возможны следующие варианты параметра "code":
             * 116 - Невозможно применить промокод к заказу 
             * 111 - Неверная цена заказа, в поле "data" приходит реальная цена
             * 113 - ProductsLimitExceed - лимит товаров в заказе (макс. 5 товаров на один заказ)  
             * 114 - OrdersLimitExceed - лимит заказов на профиль пользователя (не более 2 заказов с оплатой при получении / не более 10 заказов с оплатой онлайн)  
          content:
            application/json: 
              schema:
                properties:
                  code:
                    type: integer
                    example: 116
    get:
      summary: Получение информациии о заказах пользователя  
      tags: [Заказы]
      parameters: 
        - $ref: '#/components/parameters/limit'     
        - $ref: '#/components/parameters/offset'
        - name: type
          in: query
          description: Тип заказа, онлайн-магазин или бронь в розничном. 
          schema: 
            type: string
            enum: ["online", "retail"]
      responses: 
        '200':
          description: Положительный ответ с данными
          content:
            application/json: 
              schema:
                $ref: '#/components/schemas/OrdersShortResponse'
        '401':
          $ref: "#/components/responses/Unauthorized"

  /orders/one:
    get:
      summary: Получение информациии о заказе по его id  
      tags: [Заказы]
      parameters: 
        - $ref: "#/components/parameters/id_query"
      responses: 
        '200':
          description: Положительный ответ с данными
          content:
            application/json: 
              schema:
                $ref: '#/components/schemas/Order'
        '401':
          $ref: "#/components/responses/Unauthorized"

  /orders/one/keep: 
    post: 
      summary: Продление срока хранения в магазине
      parameters: 
        - $ref: "#/components/parameters/id_query"
      tags: [Заказы]
      responses: 
        '200':
          description: Заказ будет сохранен
        '401':
          $ref: "#/components/responses/Unauthorized"

  /orders/one/cancel: 
    post: 
      summary: Отмена заказа
      parameters: 
        - $ref: "#/components/parameters/id_query"
      tags: [Заказы]
      requestBody: 
          required: true
          description: | 
            Тело отмены заказа. Содержит причину отмены
          content:
            application/json: 
              schema:
                $ref: "#/components/schemas/CancelOrderBody"
      responses: 
        '200':
          description: Заявка на отмену принята
        '401':
          $ref: "#/components/responses/Unauthorized"

  /orders/recalculate: 
    post: 
      summary: Пересчет стоимости товаров в заказе
      requestBody: 
        description: | 
          Данные для пересчета стоимости заказа (корзины).
          * promocode - примененный к корзине промо-код. Если передается пустое значение, промокод удаляется из корзины
          * payment_type - тип оплаты заказа.
          * delivery_address_id - id адреса для курьерской доставки. Если передается пустое значение, 
          считается, что заказ не доставляется курьером.
          * delivery_courier_id - id курьера для курьерской доставки. Если передается пустое значение, 
          считается, что заказ не доставляется курьером. 
          * pick_up_point_id - id пункта самовывоза. Если передается пустое значение, считается, что заказ не доставляется в пункт самовывоза.
        content:
          application/json: 
            schema:
                $ref: '#/components/schemas/RecalculateOrderRequest' 
      tags: [Заказы]
      responses: 
        '200':
          description: Заказ пересчитан
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CartResponse"
        '401':
          $ref: "#/components/responses/Unauthorized"

  /3ds:
    post:
      summary: Подтверждение оплаты по протоколу 3D Secure  
      tags: [Заказы]
      requestBody: 
        description: | 
          Данные для оплаты карты через 3DS. 
          Высылаются зашифрованные открытым ключом сервера по алгоритму RSA. 
          Сервер расшифровывает закрытым ключом и высылает в CRM.
        content:
          application/json: 
            schema:
              properties: 
                details: 
                  $ref: '#/components/schemas/ThreeDsDetails' 
      responses:
        '200': 
          description: Оплата произведена, заказ создан
          content:
            application/json: 
              schema:
                $ref: '#/components/schemas/Order'
        '401': 
          $ref: '#/components/responses/Unauthorized'
        '400':
          description: Ошибка при оплатe
          content:
            application/json:
              schema:
                properties:
                  code: 
                    type: integer
                    description: |
                      Код серверной ошибки. 
                      * 110 - платеж отклонен, недостаточно средств
                    example: 110

  /reserve: 
    post: 
      summary: Бронирование товара
      tags: [Заказы]
      description: Бронирование товара в оффлайн-магазине
      requestBody: 
          required: true
          description: | 
            Тело бронирования товара. Содержит идентификатор магазина, идентификатор товара и размер этого товара.
          content:
            application/json: 
              schema:
                $ref: "#/components/schemas/ReserveProductBody"
      responses: 
        '200':
          description: Заказ создан
        '401':
          $ref: "#/components/responses/Unauthorized"
  
  /purchases:
    get:
      summary: Получение информациии о купленных товарах  
      tags: [Заказы]
      parameters: 
        - $ref: '#/components/parameters/limit'     
        - $ref: '#/components/parameters/offset'
      responses: 
        '200':
          description: Положительный ответ с данными
          content:
            application/json: 
              schema:
                $ref: '#/components/schemas/PurchasesResponse'
        '401':
          $ref: "#/components/responses/Unauthorized"
          
  /cart:
    get:
      summary: Получение информациии о товарах в корзине
      tags: [Корзина]
      responses: 
        '200':
          description: Положительный ответ с данными
          content:
            application/json: 
              schema:
                $ref: '#/components/schemas/CartResponse'
        '401': 
          $ref: '#/components/responses/Unauthorized'
    put: 
      summary: Обновление товаров в корзине
      tags: [Корзина]
      description: | 
        Для обновления следует передать в requestBody массив объектов, 
        содержащих id размера товара, и количество, которое будет добавлено/удалено. 
        
        Если количество приходит положительным числом - столько товаров нужно добавить в корзину.
        Иначе - столько товаров нужно удалить.  
      requestBody: 
          required: true
          content:
            application/json: 
              schema:
                $ref: "#/components/schemas/CartRequestBody"
      responses: 
        '200':
          description: Корзина была обновлена
        '401': 
          $ref: '#/components/responses/Unauthorized'

  /cart/{id}:
    delete: 
      summary: Удаление продукта из корзины
      tags: [Корзина]
      parameters:
        - $ref: '#/components/parameters/size_id'     
      responses: 
        '200':
          description: Обновленная корзина
          content:
            application/json: 
              schema:
                $ref: '#/components/schemas/CartResponse'
        '401': 
          $ref: '#/components/responses/Unauthorized'

  /cart/info:
    post:
      summary: Получение информациии о товарах в корзине без авторизации
      security: []
      tags: [Корзина]
      requestBody:
        required: true
        description: | 
          Массив, содержащий данные для добавления товаров в корзину, 
          отсылаемый пользователем без авторизации, 
          для получения сведений о своей корзине. 

          Необходим для того, чтобы поддерживать товары даже неавторизованного пользователя в актуальном состоянии. 
        content:
          application/json: 
            schema:
              $ref: "#/components/schemas/CartRequestBody"
      responses: 
        '200':
          description: Положительный ответ с данными
          content:
            application/json: 
              schema:
                $ref: '#/components/schemas/CartResponse'

  /cart/check: 
    get:
      summary: Проверка товаров в корзине
      description: |
        Проверка товаров в корзине на соответствие условиям возможности оформить заказ:
        1. У пользователя не более 5 товаров в корзине
        2. У пользователя не более 2 розничных и не более 10 онлайн-заказов

      tags: [Корзина]
      responses: 
        '200':
          description: Положительный ответ, проверка прошла
        '400': 
          description: | 
            Ошибка проверки корзины. Возможны следующие варианты параметра "code":
             * 113 - ProductsLimitExceed - лимит товаров в заказе (макс. 5 товаров на один заказ)  
             * 114 - OrdersLimitExceed - лимит заказов на профиль пользователя (не более 2 заказов с оплатой при получении / не более 10 заказов с оплатой онлайн)  
          content:
            application/json: 
              schema:
                properties:
                  code:
                    type: integer
                    example: 113
        '401':
          $ref: "#/components/responses/Unauthorized"

  /favorites:
    get:
      summary: Получение списка избранных продуктов
      tags: [Избранное]
      responses: 
        '200':
          description: Положительный ответ с данными
          content:
            application/json: 
              schema:
                $ref: '#/components/schemas/FavoritesResponse'
        '401': 
          $ref: '#/components/responses/Unauthorized'
  /favorites/{id}:
    put:
      summary: Добавление продукта в избранное
      tags: [Избранное]
      parameters:
        - $ref: '#/components/parameters/size_id'     
      responses: 
        '200':
          description: Продукт был добавлен
        '401': 
          $ref: '#/components/responses/Unauthorized'
    delete:
      summary: Удаление продукта из избранного
      tags: [Избранное]
      parameters:
        - $ref: '#/components/parameters/size_id'     
      responses: 
        '200':
          description: Продукт был удален
        '401': 
          $ref: '#/components/responses/Unauthorized'
  /favorites/info:
    post: 
      summary: Получение списка избранных продуктов без авторизации
      security: []
      tags: [Избранное]
      requestBody:
        required: true
        description: | 
          Массив, содержащий данные для добавления товаров в избранное, 
          отсылаемый пользователем без авторизации, 
          для получения сведений о своем избранном. 

          Необходим для того, чтобы поддерживать товары даже неавторизованного пользователя в актуальном состоянии. 
        content:
          application/json: 
            schema:
              $ref: "#/components/schemas/FavoritesRequestBody"
      responses: 
        '200':
          description: Положительный ответ с данными
          content:
            application/json: 
              schema:
                $ref: '#/components/schemas/FavoritesResponse'

components:

  schemas:

  # Authorization 

    VerifyPhoneRegisterRequest: 
      properties: 
        phone:
          $ref: "#/components/schemas/Phone"
        code: 
          type: string
          description: Смс-код подтверждения телефона
          example: "1234"
      required:
        - phone
        - code

    UpdatePhoneRequest: 
      allOf: 
        - $ref: "#/components/schemas/VerifyPhoneRegisterRequest"
      required:
        - phone
        - code

    UpdateEmailRequest: 
      allOf: 
        - type: object
          properties: 
            new_email: 
              type: string
              description: Новый email пользователя.
              example: user@rendez-vous.ru
      required:
        - phone
        - code
        - new_email

    RegisterRequest: 
      properties:
        phone:
          $ref: "#/components/schemas/Phone"
        name:
          description: Имя пользователя 
          type: string
          example: "Алексей"
        email: 
          $ref: "#/components/schemas/Email"
        password:
          description: Пароль
          type: string
          example: "qwerty123"
        version:
          description: Текущая версия приложения
          type: string
          example: "1.4.5"
        device:
          $ref: "#/components/schemas/Device"
        token:
          description: Токен для push уведомлений (FCM)
          type: string
          example: "cLns7xxKb08:APA91bHdmtragN05QJ7StCSMNunOQpVurJPRhAAhsnvbObBtuR0rbVAwvWBqoor2ss3YLOOzLkDc755e9PczPlFCWotva-PeeWONB9Q4c7l0qHkuQZe_MOqEReiRJ5woS4OBNfnfQ2sL"
        cart_product_ids: 
          description: |
            Массив идентификаторов размеров продуктов и их количества, которые неавторизованный пользователь добавил в корзину.
            Передается для синхронизации с корзиной на стороне сервера.
          type: array
          items: 
            $ref: "#/components/schemas/ProductCartRequest"
        favorite_product_ids: 
          description: |
            Массив идентификаторов размеров продуктов, которые неавторизованный пользователь добавил в избранное. 
            Передается для синхронизации с избранным на стороне сервера.
          type: array
          items: 
            $ref: "#/components/schemas/ProductFavoriteRequest"
      required: 
        - phone
        - name
        - email
        - password

    LoginRequest:
      properties:
        login:
          description: Адрес электронной почты или номер телефона или номер карты Rendez-Vous.
          type: string
          example: "79001234567"
        pass:
          description: Пароль
          type: string
          example: "qwerty123"
        version:
          description: Текущая версия приложения
          type: string
          example: "1.4.5"
        device:
          $ref: "#/components/schemas/Device"
        token:
          description: Токен для push уведомлений (FCM)
          type: string
          example: "cLns7xxKb08:APA91bHdmtragN05QJ7StCSMNunOQpVurJPRhAAhsnvbObBtuR0rbVAwvWBqoor2ss3YLOOzLkDc755e9PczPlFCWotva-PeeWONB9Q4c7l0qHkuQZe_MOqEReiRJ5woS4OBNfnfQ2sL"
        cart_product_ids: 
          description: |
            Массив идентификаторов размеров продуктов и их количества, которые неавторизованный пользователь добавил в корзину.
            Передается для синхронизации с корзиной на стороне сервера.
          type: array
          items: 
            $ref: "#/components/schemas/ProductCartRequest"
        favorite_product_ids: 
          description: |
            Массив идентификаторов размеров продуктов, которые неавторизованный пользователь добавил в избранное. 
            Передается для синхронизации с избранным на стороне сервера.
          type: array
          items: 
            $ref: "#/components/schemas/ProductFavoriteRequest"
      required: 
        - login
        - pass
        - version

    Token: 
      type: string
      example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
      
    RefreshTokenResponse:
      properties: 
        refresh_token: 
          $ref: '#/components/schemas/Token'

    AuthResponse:
      properties:
        profile:
          $ref: '#/components/schemas/Profile'
        refresh_token: 
          $ref: '#/components/schemas/Token'
    
    RecoverPasswordBody: 
      properties: 
        login: 
          type: string
          description: Логин пользователя. Может быть e-mail'ом, телефоном или номером карты лояльности.
          example: "user@rendez-vous.ru"

    Device:
      description: |
        Устройство пользователя (операционная система)
      type: string
      enum: ["ios", "android"]
      example: "ios"

  # Profile 

    Profile: 
      allOf: 
        - type: object
          properties: 
            id: 
              $ref: "#/components/schemas/Id"
            phone: 
              $ref: "#/components/schemas/Phone"
            email: 
              type: string
              description: Email пользователя
              example: user@rendez-vous.ru
            card: 
              $ref: "#/components/schemas/ProfileCard"
        - $ref: "#/components/schemas/ProfileInfo"
    
    ProfileFeedResponse: 
      properties: 
        profile: 
          $ref: "#/components/schemas/Profile"
        card_hash:
          type: string
          description: Хэш-код карты лояльности, для которого генерируется QR
          example: "CARD0;5;1.3.5.32;0.8.10.3;9.0.1.37;32.1.1.5.1.15.1"
        online_orders_count:
          type: integer
          description: Количество интернет заказов
        retail_orders_count:
          type: integer
          description: Количество розничных заказов
        my_products_count: 
          type: integer
          description: Количество купленных товаров

    ProfileCard:
      properties:
        number:
          type: string
          description: Номер карты
          example: "2115161"
        spend:
          $ref: "#/components/schemas/Money"
        spend_to_upgrade:
          $ref: "#/components/schemas/Money"
        discount:
          type: integer
          description: Размер текущей скидки
          example: 10
        discount_on_upgrade:
          type: integer
          description: Размер скидки при апгрейде статуса пользователя
          example: 11
        is_blocked:
          type: boolean
          description: Является ли карта заблокированной
          example: false

    CardHashResponse:
      properties: 
        hash: 
          type: string
          description: Хэш-код карты лояльности, для которого генерируется QR
          example: "CARD0;5;1.3.5.32;0.8.10.3;9.0.1.37;32.1.1.5.1.15.1"

    ProfileInfo: 
      properties: 
        first_name: 
          type: string
          description: Имя
          example: "Иван"
        last_name: 
          type: string
          description: Фамилия
          example: "Иванов"
        middle_name: 
          type: string
          description: Отчество
          example: "Иванович"
        birthday: 
          $ref: "#/components/schemas/Date"
        gender: 
          $ref: "#/components/schemas/Gender"
        foot_size:
          type: string
          description: Размер ноги в EU-сетке
          example: "36,5"
          
    Gender: 
      description: | 
        Пол пользователя
        * 0 - женский
        * 1 - мужской
        * 2 - не установлен (в бизнес логике не используется)
      type: integer
      enum: [0, 1, 2]
      example: 1

    PersonalEvent: 
      properties: 
        type: 
          $ref: "#/components/schemas/PersonalEventType"
        order: 
          $ref: "#/components/schemas/Order"
        promocode_info: 
          $ref: "#/components/schemas/PromocodeInfo"
      
    PersonalEventType: 
      type: integer
      description: |
        Тип события в личном кабинете
        * 0 - заказ
        * 1 - промокод
    PromocodeInfo: 
      properties: 
        promocode: 
          $ref: "#/components/schemas/Promocode"
        expires_in: 
          $ref: "#/components/schemas/Date"
        value: 
          type: number
          description: Размер скидки (в процентах)
          example: 15
    
    FootSizesResponse:
      properties: 
        sizes:
          type: array
          items: 
            $ref: "#/components/schemas/FootSize"

    FootSize:
      description: |
        Размер ноги, который пользователь может установить в своем профиле. Задается в EU-сетке.
      properties:
        value:
          type: string
          description: Размер ноги
          example: "36,5"

  # Catalogue

    Section: 
      description: |
        Секция каталога. 
        Представляет из себя группу товаров, объединенных по какому-то общему признаку. 
        Секция может быть списком с товарами, сгруппированными по параметрам (Например, Женские кроссовки), 
        может быть списком акционных товаров (Осенняя распродажа), или списком с коллекцией товаров, формируемых на стороне сервера (Зимняя коллекция)
      properties: 
        id: 
          $ref: "#/components/schemas/Id"
        name: 
          type: string
          description: Уникальное имя секции, использумое для фильтрации
          example: bags_female
        type: 
          $ref: "#/components/schemas/SectionType"
        title: 
          type: string
          description: Название секции, на русском языке
          example: Женские сумки
        icon: 
          type: string
          description: URL иконки секции
          example: "https://google.com/123456.jpg"
        expand_data: 
          $ref: "#/components/schemas/ExpandProductsData"
        subsections: 
          type: array
          description: | 
            Секции, вложенные в текущую. Например, для секции "Обувь"
            будут выдаваться подсекции "Вся обувь", "Ботинки", "Кеды", "Кроссовки", и так далее.  
          items: 
            $ref: "#/components/schemas/Section"

    SectionType: 
      type: string 
      enum: ["promo", "default"]
      example: "default"

    SectionsResponse: 
      properties: 
        female: 
          $ref: "#/components/schemas/SectionsList"
        male: 
          $ref: "#/components/schemas/SectionsList"
        child: 
          $ref: "#/components/schemas/SectionsList"

    SectionsList: 
      type: array
      items: 
        $ref: "#/components/schemas/Section"  

    Size: 
      description: | 
        Модель размера товара. 
        Идентификатор product_id является идентификатором модели товара, к которой привязан размер. 
        Идентификатор product_size_id является идентификатором пары модель + размер, его необходимо использовать для покупки и создания заказа. 
      properties: 
        product_size_id: 
          $ref: "#/components/schemas/Id"
        product_id: 
          $ref: "#/components/schemas/Id"
        value_eu: 
          type: string
          description: Размер обуви, в европейском формате
          example: "40"
        value_ru: 
          type: string
          description: Размер обуви, в русском формате
          example: "40"
        value_us: 
          type: string
          description: Размер обуви, в американском формате
          example: "40"
        value_uk:
          type: string
          description: Размер обуви, в британском формате
          example: "9"
        count: 
          type: integer
          description: Количество товаров этого размера в заказе/корзине
        stock_count:
          type: integer
          description: Остаток товаров на складе
      required:
        - product_size_id
        - product_id
        - value_ru
        - stock_count

    Color: 
      properties:
        name:
          type: string
          description: Имя цвета
          example: Черный
        hex_value: 
          type: string 
          description: Значение цвета в HEX-формате
          example: 000000
      required:
        - name
        - hex_value
    
    FurStatus: 
      type: integer
      description: |
        Тип меха у товара (зимней обуви)
        * 0 - нет меха
        * 1 - евромех (только стелька)
        * 2 - мех полностью во всем сапоге
      enum: [100, 200, 300]
      example: 0

    ProductsResponse:
      properties:
        products: 
          type: array
          items: 
            $ref: "#/components/schemas/ProductShort"
        metadata: 
          $ref: "#/components/schemas/Metadata"

    ProductShort: 
      properties: 
        id:  
          $ref: "#/components/schemas/Id"
        title: 
          type: string 
          description: Название товара
          example: INGRID
          nullable: true
        discount_price: 
          $ref: "#/components/schemas/Money"
          nullable: true
        retail_price:
          $ref: "#/components/schemas/Money"
        preview_picture: 
          type: string
          description: Превью-изображение модели
          example: "https://static.rendez-vous.ru/files/catalog_models/resize_640x630/9/950675_baletki_calvin_klein_ingrid_chernyy_kozha_natural_naya.JPG"
        article: 
          type: string
          description: Артикул товара
          example: WMK65BWF
          nullable: true
        category_name: 
          type: string
          description: Категория товара
          example: Женские туфли
        brand_id: 
          $ref: "#/components/schemas/Id"
        brand_name: 
          type: string
          description: Название бренда
          example: "Calvin Klein" 
        rating: 
          description: Рейтинг товара по 5-ти бальной шкале
          type: number
          example: 4.5
          nullable: true
        review_count: 
          type: integer
          description: Количество отзывов о товаре
          example: 44
          nullable: true
        fav_count:
          type: integer
          description: Количество добавлений товара в избранное
          example: 9
          nullable: true
        is_on_sale:
          type: boolean
          description: Флаг, указывающий, действуют ли сейчас на товар какие-либо акции
          nullable: true
        is_new:
          type: boolean
          description: Флаг, указывающий, является ли товар новинкой
          nullable: true
        is_bought_by_me: 
          type: boolean
          description: Флаг, указывающий, был ли товар куплен текущим пользователем 
          nullable: true
        is_sized: 
          type: boolean
          description: Флаг, указывающий, есть ли у товара размеры, или он безразмерный.
          nullable: true
        color:
          $ref: "#/components/schemas/Color"
          nullable: true
        fur_status: 
          $ref: "#/components/schemas/FurStatus"        
          nullable: true
        sizes: 
          type: array
          description: Массив размеров обуви, в европейском формате
          example: ["39", "40", "40.5", "41"]
          items: 
            type: string
          nullable: true
        promo_pictures: 
          type: array
          items: 
            $ref: "#/components/schemas/Picture"  
          nullable: true
      required:
         - id
         - retail_price
         - preview_picture
         - category_name
         - brand_id
         - brand_name

    ProductSized: 
      description: | 
        Товар, содержащий информацию о доступных на складе размерах, 
        и добавленные пользователем в корзину, избранное, или в заказ
        идентификаторы размеры. 
      allOf:
        - $ref: "#/components/schemas/ProductShort"  
        - type: object
          properties:
            available_sizes: 
              description: | 
                Все размеры товара, представленные на сайте. 
                Массив содержит даже те товары, которых нет на складе. Для них stock_count=0. 
              type: array 
              items: 
                $ref: "#/components/schemas/Size"
            favorite_size_ids: 
              type: array 
              description: Массив идентификаторов размеров товаров, помещенных в избранное.
              items: 
                $ref: "#/components/schemas/Id"

    ProductCart: 
      allOf:
        - $ref: "#/components/schemas/ProductSized"  
        - type: object
          properties:
            color_variations: 
              type: array
              description: |
                Версии того же товара, но с другими цветами.
                Приходят полные версии товаров. 
              items: 
                $ref: "#/components/schemas/ProductCart"

    ProductDetail: 
      allOf:
        - $ref: "#/components/schemas/ProductSized"  
        - type: object
          properties:
            color_variations_short: 
              type: array
              description: |
                Версии того же товара, но с другими цветами.
                Приходят только идентификаторы и превью, без полной информации о товаре.
              items: 
                $ref: "#/components/schemas/ColorVariationShort"
            pictures:
              type: array
              example: [
                "https://static.rendez-vous.ru/files/catalog_models/resize_640x630/9/950675_baletki_calvin_klein_ingrid_chernyy_kozha_natural_naya.JPG",
                "https://static.rendez-vous.ru/files/catalog_models/resize_640x630/9/950675_baletki_calvin_klein_ingrid_chernyy_kozha_natural_naya.JPG","https://static.rendez-vous.ru/files/catalog_models/resize_640x630/9/950675_baletki_calvin_klein_ingrid_chernyy_kozha_natural_naya.JPG",
                "https://static.rendez-vous.ru/files/catalog_models/resize_640x630/9/950675_baletki_calvin_klein_ingrid_chernyy_kozha_natural_naya.JPG"
              ]
              items: 
                type: string
                description: Картинка с изображением товара для полноэкранного просмотра
                example: "https://static.rendez-vous.ru/files/catalog_models/resize_640x630/9/950675_baletki_calvin_klein_ingrid_chernyy_kozha_natural_naya.JPG"
            video: 
              type: string
              example: "https://static.rendez-vous.ru/files/catalog_models/resize_640x630/9/950675_baletki_calvin_klein_ingrid_chernyy_kozha_natural_naya.JPG"
            video_360: 
              type: string 
              example: "https://static.rendez-vous.ru/files/catalog_models/resize_640x630/9/950675_baletki_calvin_klein_ingrid_chernyy_kozha_natural_naya.JPG"
            video_review: 
              type: string
              example: "https://static.rendez-vous.ru/files/catalog_models/resize_640x630/9/950675_baletki_calvin_klein_ingrid_chernyy_kozha_natural_naya.JPG"
            url: 
              type: string
              description: Url модели на сайте Rendez Vous
              example: https://www.rendez-vous.ru/catalog/female/krossovki/abricot_956_2_bezhevyy-2218744/
            sizes_table: 
               type: string
               description: Url таблицы размеров для конкретной модели на сайте Rendez Vous. Если этой таблицы нет - приходит пустая строка.
               example: https://www.rendez-vous.ru/catalog/sizeschart/501/
        
    ProductDetailResponse:
      properties: 
        product: 
          $ref: "#/components/schemas/ProductDetail"
        features: 
          type: array
          description: Key-Value список из фич продукта
          items: 
            $ref: "#/components/schemas/Feature"
        similar_products: 
          type: array
          description: Похожие на данный продукты
          items: 
            $ref: "#/components/schemas/ProductShort"  
        matching_products: 
          type: array
          description: Продукты, подходящие по стилю к данному продукту
          items: 
            $ref: "#/components/schemas/ProductShort"
        products_for_care: 
          type: array
          description: Продукты для ухода за данным продуктом
          items: 
            $ref: "#/components/schemas/ProductShort"  
        reviews_short: 
          type: array
          minItems: 3
          maxItems: 3
          description: Первые 3 отзыва о товаре
          items: 
            $ref: "#/components/schemas/Review"
        reviews_count: 
          type: integer
          description: Количество всех отзывов
          example: 250

    ColorVariationShort: 
      description: Краткая информация о другом цвете товара. Содержит только id и ссылку на картинку.
      properties:
        id: 
          $ref: "#/components/schemas/Id"
        preview_picture:
          type: string 
          description: Ссылка на превью изображение товара

    Feature: 
      properties: 
        name: 
          type: string
        value: 
          type: string

    Certificate: 
      properties: 
        icon: 
          type: string
          description: Иконка сертификата 
          example: https://static.rendez-vous.ru/files/certificates/470_Deklaraciya_o_sootvetstvii_na_kozhanuyu_obuv__Adidas__Reebok.jpg
        name: 
          type: string
          description: Название сертификата
          example: Декларация о соответствии на кожаную обувь Adidas, Reebok
        document_url: 
          type: string
          description: Ссылка на документ сертификата
          example: https://static.rendez-vous.ru/files/certificates/470_Deklaraciya_o_sootvetstvii_na_kozhanuyu_obuv__Adidas__Reebok__prilozhenie_.pdf
    
    Certificates: 
      properties: 
        certificates: 
          type: array
          description: Похожие на этот продукты
          items: 
            $ref: "#/components/schemas/Certificate"

  # Search
    
    SearchHint: 
      properties: 
        value: 
          type: string
          description: Значение поисковой подсказки
          example: Женские кроссовки
        expand_data: 
          $ref: "#/components/schemas/ExpandProductsData"
        
    ExpandProductsData: 
      description: |
        Данные, необходимые для открытия какой-либо области с товарами.
        Могут потребоваться в автодополнении, чтобы открыть нужный раздел каталога, 
        либо в каруселях с превью товаров, в которых открытие нужного раздела каталога 
        происходит по нажатию на заголовок.
      properties:
        name: 
          type: string
          description: |
            Имя блока данных, отображаемое в заголовке. 
            Например, "Кеды Calvin Klein" или "Winter Collection 2019"  
          nullable: true
        section: 
          type: string
          description: |
            Значение секции, в которой будет открыт раздел каталога.
          nullable: true
        collection_id: 
          type: string
          description: | 
            Имя коллекции, которую следует открыть. Если коллекция не пустая, при нажатии на элемент, происходит переход в нее.
            Коллекция является аналогом lifestyle из веб-сайта.
          nullable: true
        filter_string: 
          type: string
          description: |
            Фильтр-строка с набором фильтров, задаваемом на стороне сервера. 
            При поступлении на клиент, просто вставляется в запрос и служит для отображения группы товаров. 
            Обязательно должна передаваться вместе с section.
          nullable: true
        brand_id: 
          type: string
          description: | 
            Идентификатор бренда. 
            Если id не пустой , при нажатии на элемент, происходит переход к экрану бренда с информацией о нем.
            Если id равен строковому значению "all_brands" - происходит открытие экрана со всеми брендами.
          nullable: true
        product_id: 
          type: string
          description: | 
            Идентификатор товара. 
            Если id не пустой, при нажатии на элемент, происходит переход к товару.
          nullable: true
    
    SearchHintsResponse: 
      properties: 
        hints: 
          type: array
          items: 
            $ref: "#/components/schemas/SearchHint"

  # Filter

    Filter: 
      properties: 
        id: 
          type: string
          description: Идентификатор фильтра (для подстановки в поисковый запрос)
          example: color 
        name: 
          type: string
          description: Название фильтра на русском языке, для отображения на UI 
          example: "Цвет" 
        type:
          $ref: "#/components/schemas/FilterType"
        position: 
          type: integer
          description: Позиция в списке (для правильного порядка на ui) 
        options: 
          type: array
          description: Массив опций, доступные для данного фильтра (т.е. варианты, которые можно выбрать)
          items: 
            $ref: "#/components/schemas/FilterOption"
        range: 
          $ref: "#/components/schemas/FilterRange"

    FilterOption: 
      properties: 
        id: 
          $ref: "#/components/schemas/Id"
        name: 
          type: string
          description: Название опции фильтра на русском языке
        code: 
          type: string
          description: |
            Цветовой код. Может содержать следующие значения:
            * `X` - леопардовый
            * `Y` - мультицвет
            * `Z` - тигровый
            * цвет в формате hex
        icon: 
          type: string
          description: Ссылка на иконку опции фильтра
        suboptions: 
          type: array
          description: Вложенные опции товара
          items: 
            $ref: "#/components/schemas/FilterOption"

    FilterRange: 
      description: Диапазон значений фильтра
      properties: 
        min: 
          type: number
          description: Нижняя граница диапазона
        max: 
          type: number
          description: Верхняя граница диапазона
        min_name: 
          type: string
          description: Имя нижней границы диапазона
        max_name: 
          type: string
          description: Имя верхней границы диапазона
        postfix: 
          type: string
          description: | 
            Постфикс для отображения числа из диапазона на UI. 
            Например, см для размера каблука, или ₽ для цены.
          example: ₽
        step: 
          type: number
          description: | 
            Шаг диапазона, на размер которого клиент может передвигать ползунок.
            В большинстве случаев равен 1, для цены используется 100.
          example: 100
        suggestions: 
          type: array
          description: | 
            Массив с заготовленными диапазонами для фильтрации.
            Предпочтительный пример заполнения диапазонов: 0..N, N..M, M..max   
          items: 
            $ref: "#/components/schemas/FilterRangeSuggestion"
    
    FilterRangeSuggestion: 
      description: Предложенный диапазон для фильтрации
      properties:
        name: 
          type: string
          description: Название подсказки
        min: 
          type: number
          description: Нижняя граница диапазона
        max: 
          type: number
          description: Верхняя граница диапазона

    FilterType: 
      type: integer
      enum: [0, 1, 2, 3]
      description: |
        Тип фильтра 
        * 0 - Checkbox (множественный выбор)
        * 1 - Checkbox + color (множественный выбор с цветом)
        * 2 - Select (выбор единственного значения)
        * 3 - Range (установка границ диапазона)
    
    FilterResponse: 
      properties: 
        filters: 
          type: array
          description: Фильтры
          items: 
            $ref: "#/components/schemas/Filter"      
  # Brand

    Brand: 
      properties: 
        id:
          $ref: "#/components/schemas/Id"
        name: 
          type: string
          description: Имя бренда
          example: Adidas
        description: 
          type: string
          description: Описание бренда
          example: Adidas
        country: 
          type: string
          description: Страна бренда
          example: США
        manufactiure_countries: 
          type: array
          description: Страны производства бренда
          items: 
            type: string
        rating: 
          type: number
          description: Рейтинг бренда
          example: 4.9
        logo:
          type: string
          description: Логотип бренда
          example: Adidas

    BrandShort:
      properties:
        id: 
          $ref: "#/components/schemas/Id"
        name: 
          type: string
          description: Имя бренда
          example: Adidas
        logo:
          type: string
          description: Логотип бренда
          example: Adidas
      required:
        - id
        - name
        - logo
    
    BrandResponse:
      properties:
        brand: 
          $ref: "#/components/schemas/Brand"
        top_products: 
          type: array
          items: 
            $ref: "#/components/schemas/ProductShort"

    BrandsResponse: 
      properties: 
        female: 
          $ref: "#/components/schemas/BrandsListBundle"
        male: 
          $ref: "#/components/schemas/BrandsListBundle"
        child: 
          $ref: "#/components/schemas/BrandsListBundle"
  
    BrandsListBundle:
      description: Бандл со списками брендов. Содержит топовые бренды и все бренды для конкретного узла.  
      properties: 
        top: 
          type: array
          items: 
            $ref: "#/components/schemas/BrandShort"
        brands: 
          type: array
          items: 
            $ref: "#/components/schemas/BrandShort"
  
  # Shops

    City: 
      properties: 
        id: 
          $ref: "#/components/schemas/Id"
        name: 
          type: string
          description: Название города
          example: Воронеж
              
    CitiesResponse: 
      properties: 
        cities: 
          type: array
          items: 
            $ref: "#/components/schemas/City"
    
    StreetAddress:
      type: string
      description: Строковое представление адреса, улица + номер дома
      example: ул. Кольцовская, 35

    GeoPosition: 
      properties: 
        lat: 
          type: string
          description: Широта
          example: "39.191738"
        long: 
          type: string
          description: Долгота
          example: "51.666315"       
    
    Location: 
      properties: 
        address: 
          $ref: "#/components/schemas/StreetAddress"
        geo_pos:
          $ref: "#/components/schemas/GeoPosition"
      required: 
      - address
      - geo_pos

    ShopLocation: 
      properties: 
        region:
          type: string
          description: Регион, в котором расположен магазин
          example: Московская область
        city:
          type: string
          description: Город, в котором расположен магазин
          example: г. Москва
        address: 
          type: string
          description: Строковое представление адреса, улица + номер дома
          example: ул. Кольцовская, 35
        floor:
          type: string
          description: Этаж, на котором расположен магазин. Параметр полезен, когда магазин располагается в крупных ТЦ, может отсутствовать
          example: 3 этаж
        sector:
          type: string
          description: Сектор, в котором расположен магазин. Параметр полезен, когда магазин располагается в крупных ТЦ, может отсутствовать
          example: Сектор Л-7
        geo_pos:
          $ref: "#/components/schemas/GeoPosition"

    AutoCompleteLocation: 
      description: Локация пользователя, возвращаемая в автодополнении
      properties: 
        address:
          description: Основной адрес - улица и номер дома
          type: string
          example: ул. Ворошилова, 43 
        description:
          description: Дополнительная расшифровка местонахождения адреса
          type: string
          example: Воронежская обл, г Воронеж, Ленинский р-н

    AutoCompleteInfo:
      description: Полная информация о подсказке, присылаемой сервером 
      properties: 
        region: 
          description: Область
          type: string
          example: "Воронежская обл"
        city: 
          description: Город
          type: string
          example: "Воронеж"
        district: 
          description: Район
          type: string
          example: "Ленинский р-н"
        index: 
          description: Индекс
          type: string
          example: "394000"
        street: 
          description: Улица
          type: string
          example: Ворошилова
        house: 
          description: Дом
          type: string
          example: "43"
        entrance: 
          description: Подъезд
          type: string
          example: "2"
        floor: 
          description: Этаж
          type: string
          example: "2"
        apartment: 
          description: Квартира 
          type: string
          example: "10"
        full_address: 
          description: Полный адрес из подсказки автодополнения (AutoCompleteLocation)
          type: string
          example: Воронежская обл, г Воронеж, Ленинский р-н, ул. Ворошилова, 43
        address_fias_id: 
          description: Идентификатор адреса в ФИАС (https://fias.nalog.ru/)
          type: string
          example: "1234"
        city_fias_id: 
          description: Идентификатор нас. пункта в ФИАС (https://fias.nalog.ru/)
          type: string
          example: "1234"
        geo_pos: 
          $ref: "#/components/schemas/GeoPosition"

    UserLocationRequest:
      description: Клиентская модель для создания адреса
      allOf:
      - $ref: "#/components/schemas/AutoCompleteInfo"

    UserLocation:
      description: Адрес пользователя
      allOf: 
        - type: object
          properties:
            id: 
              $ref: "#/components/schemas/Id"
        - $ref: "#/components/schemas/UserLocationRequest" 
      required:
        - id
    
    UserLocations: 
      type: array
      items: 
        $ref: '#/components/schemas/UserLocation'

    Settlement: 
      description: Населенный пункт
      properties: 
        id: 
          $ref: "#/components/schemas/Id"
        name: 
          type: string
          description: Название поселения
          example: село Карачики
        description:
          description: Дополнительная расшифровка местонахождения поселения
          type: string
          example: Варненский р-н, Челябинская область, Россия
      required:
        - id
        - name

    SettlementsResponse: 
      properties:
        settlements: 
          type: array
          items: 
            $ref: "#/components/schemas/Settlement"
          
    SettlementsPaginationResponse: 
      allOf:
        - $ref: "#/components/schemas/SettlementsResponse"
        - $ref: "#/components/schemas/MetadataResponse"
    
    Shop:
      properties: 
        id: 
          $ref: "#/components/schemas/Id"
        name: 
          type: string
          description: Название магазина
          example: Центр Галереи Чижова
        phone: 
          $ref: "#/components/schemas/Phone"
        location: 
          $ref: "#/components/schemas/ShopLocation"
        working_hours:
          type: array
          description: |
            Время работы магазина.
            Может содержать строку в формате "10.00-22.00", 
              если время работы магазина не зависит от дня недели.
            Либо строку формата "пт-сб 10.00-23.00" в противном случае.
          items: 
            type: string

    ShopWithProduct: 
      allOf: 
        - $ref: "#/components/schemas/Shop"
        - type: object
          properties: 
            pick_up_before:
              type: string
              description: |
                Строка, в которой содержится информация о том,
                до какой даты и времени можно забрать товар/заказ из магазина.
              example: до 22:00 26 февраля
            product_sized_count:
              type: integer
              description: |
                Количество товаров выбранного размера в данном магазине. 
                Используется в запросе GET products-sized/{id}/shops. В остальных случаях можно указывать 0.
              nullable: false
              example: 2

    ShopsResponse: 
      properties:
        shops:
          type: array
          items: 
            $ref: "#/components/schemas/Shop"  
    
    ShopsWithProductResponse: 
      properties:
        shops:
          type: array
          items: 
            $ref: "#/components/schemas/ShopWithProduct"  
    
  # Reviews

    Review:
      properties: 
        id: 
          $ref: "#/components/schemas/Id"
        rating: 
          type: number
          description: Рейтинг товара в отзыве по пятибальной шкале
          example: 4.5
        text:
          type: string
          description: Текст отзыва
          example: Text
        user_name:
          type: string
          description: Имя человека, оставившего отзыв
          example: Кристиночка
        product: 
          $ref: "#/components/schemas/ProductShort"
        date: 
          $ref: "#/components/schemas/Date"
        pictures: 
          type: array
          description: Ссылки на картинки отзыва
          items: 
            type: string

    ReviewsResponse: 
      properties: 
        reviews: 
          type: array
          items: 
            $ref: "#/components/schemas/Review"
        metadata:
          $ref: "#/components/schemas/Metadata"

  # Feed
    FeedResponse:
      properties: 
        components: 
          type: array
          items: 
            $ref: "#/components/schemas/FeedComponent"
      required:
        - components
    
    FeedComponent: 
      properties:
        id: 
          $ref: "#/components/schemas/Id"
        type: 
          type: string
          description: Тип элемента в ленте. В зависимости от типа может приходить разный контент.
          enum:
            - "banners"
            - "stories"
            - "products"
            - "exclusives"
            - "brands"
            - "offers"
        content: 
          $ref: "#/components/schemas/FeedComponentContent"
      required:
        - id
        - type
        - content
      
    FeedComponentContent: 
      properties:
        banners: 
          type: array
          items: 
            $ref: "#/components/schemas/Banner"
        stories: 
          type: array
          items: 
            $ref: "#/components/schemas/Story"
        exclusives:
          type: array
          description: Блок эксклюзивных продуктов на главной. 
          items:
            $ref: "#/components/schemas/ExclusiveProduct"
        products: 
          $ref: '#/components/schemas/FeedProducts'
        brands: 
          $ref: '#/components/schemas/FeedBrands'
        offers: 
          type: array 
          description: Персональные предложения (не в MVP)
          items: 
            $ref: '#/components/schemas/Offer'
    
    Banner: 
      properties:
        id: 
          $ref: "#/components/schemas/Id"
        type: 
          type: string
          enum: 
            - "card" 
            - "bg" 
            - "card_bg"
          description: | 
            Тип баннера. Только с карточкой (без бекграунда), с одним бекграундом (без карточки), или и с тем, и с другим.
            В зависимости от типа баннера на ui разное отображение и анимации. 
            Для одного списка баннеров нельзя присылать баннеры разного типа.
        title: 
          type: string
          description: Заголовок баннера
          example: от -33% до -70%
          nullable: true
        description: 
          type: string
          description: Краткое описание баннера
          example: На летний и всесезонный ассортимент  
          nullable: true
        sale_info: 
          type: string
          description: Текст с информацией о распродаже
          example: FINAL SALE
          nullable: true
        is_dark: 
          type: boolean 
          description: Содержит ли этот баннер темную, или светлую картинку (нужно для верной отрисовки статус-бара)
        picture: 
          type: string
          description: Url-адрес картинки баннера. 
        expand_data: 
          $ref: "#/components/schemas/ExpandFeedData"
      required:
        - id
        - type
        - is_dark
        - picture
        - expand_data

    Story: 
      properties:
        id:
          $ref: "#/components/schemas/Id"
        preview_picture: 
          type: string
          description: Превью-изображение новостного блока
        title:
          type: string
          description: Заголовок, который будет отображаться на главном экране поверх превью-изображения
          nullable: true
        blocks: 
          type: array
          minItems: 1
          maxItems: 4
          items: 
            $ref: "#/components/schemas/StorySegment"
      required:
        - id
        - preview_picture
        - blocks

    StorySegment: 
      description: Сегмент блока новостей (1 элемент в сторис)
      properties:
        picture: 
          type: string
          description: Url-адрес картинки блока
        is_dark: 
          type: boolean 
          description: Содержит ли эта стори темную, или светлую картинку (нужно, для правильного отображения текста поверх)
        title: 
          type: string
          description: Заголовок блока
          nullable: true
        text: 
          type: string
          description: Сопроводительный текст
          nullable: true
        duration: 
          type: integer
          description: Продолжительность показа блока сторис (в секундах)
          example: 10 
        expand_data: 
          $ref: "#/components/schemas/ExpandFeedData"
      required:
        - picture
        - is_dark
        - duration

    ExclusiveProduct:
      description: Эксклюзивный продукт, отображающийся на главной. Содержит картинку с изображением товара и цветным бекграундом. 
      properties: 
        product: 
          $ref: "#/components/schemas/ProductShort"
        picture:
          $ref: "#/components/schemas/Picture"
      required:
        - product
        - picture

    Offer: 
      description: |
        Персональное предложение, отображающееся на главной. 
        Содержит картинку с цветным бекграундом.
        Может содержать либо параметры для фильтрации каталога, либо ссылку на блог.
      properties: 
        picture:
          $ref: "#/components/schemas/Picture" 
        title: 
          type: string
          description: Заголовок 
        text: 
          type: string
          description: Сопроводительный текст
        expand_data: 
          $ref: "#/components/schemas/ExpandFeedData" 

    FeedProducts: 
      description: | 
        Блок продуктов на главной. Содержит список продуктов, заголовок и 
        данные для открытия раздела каталога, из которого была взята выборка.
      properties: 
        name: 
          type: string
          description: Название блока продуктов на русском языке
          example: "Бестселлеры"
        products: 
          type: array
          items: 
            $ref: "#/components/schemas/ProductShort"
        rows: 
          type: integer
          description: Количество строк с товарами в выдаче. Клиент умеет обрабатывать 1 или 2 строки.
        expand_data: 
          $ref: "#/components/schemas/ExpandProductsData"
      required:
        - name
        - products
        - expand_data
        - rows
    
    FeedBrands: 
      properties: 
        name: 
          type: string
          description: Название блока с брендами на русском языке
          example: Топ бренды
        brands: 
          type: array
          items: 
            $ref: "#/components/schemas/BrandShort"
      required:
        - name
        - brands

    ExpandFeedData: 
      allOf:
        - $ref: "#/components/schemas/ExpandProductsData"
        - type: object
          properties:
            blogpost_url: 
              type: string
              description: Url-адрес для открытия блога
              nullable: true

            
  # Orders
    OrderShort: 
      properties:
        id: 
          $ref: "#/components/schemas/Id"
        status:
          $ref: "#/components/schemas/OrderStatus"
        state:
          $ref: "#/components/schemas/OrderState"
        name: 
          type: string
          description: Название заказа. Может быть либо его идентификатором, либо номером брони. 
          example: "553252"
        is_paid:
          type: boolean 
          description: Оплачен ли заказ
          example: false
        create_date: 
          $ref: "#/components/schemas/Date"
        total_sum: 
          $ref: "#/components/schemas/Money"
        products_preview:
          type: array
          description: |
            Массив превью товаров в заказе. Содержит id и маленькие версии картинок.
          items: 
            $ref: "#/components/schemas/OrderProductShort"

    OrderProductShort: 
      properties: 
        id: 
          $ref: "#/components/schemas/Id"
        picture: 
          type: string
          description: Превью-изображение товара из заказа

    Order: 
      properties: 
        id: 
          $ref: "#/components/schemas/Id"
        statuses:
          description: |
            Статусы заказа. 
            Отсортированы по дате, самый первый статус в списке - самый новый.
          type: array  
          items: 
            $ref: "#/components/schemas/OrderStatus"
        state:
          $ref: "#/components/schemas/OrderState"
        name: 
          type: string
          description: Название заказа. Может быть либо его идентификатором, либо номером брони. 
          example: "553252"
        is_paid:
          type: boolean 
          description: Оплачен ли заказ
          example: false
        recipient: 
          $ref: "#/components/schemas/OrderRecipient"
        delivery_info:
          $ref: "#/components/schemas/OrderDeliveryInfo"
        payment_type: 
          $ref: "#/components/schemas/PaymentType"
        products: 
          description: С  писок товаров в заказе
          type: array
          items: 
            $ref: "#/components/schemas/OrderBoughtProduct"
        can_be_canceled: 
          type: boolean
          description: Можно ли отменить заказ
        can_be_kept: 
          type: boolean
          description: Можно ли продлить срок хранения заказа
        price_info:
          $ref: "#/components/schemas/OrderPriceInfo"

    OrderBoughtProduct: 
      properties:
        product: 
          $ref: "#/components/schemas/ProductShort"
        bought_size: 
          $ref: "#/components/schemas/Size"

    OrderDeliveryInfo: 
      properties: 
        type: 
          $ref: "#/components/schemas/DeliveryType"
        time_info: 
          $ref: "#/components/schemas/DeliveryTime"
        courier: 
          $ref: "#/components/schemas/CourierDeliveryInfo"
        shop:
          $ref: "#/components/schemas/ShopWithProduct"
        pick_up_point: 
          $ref: "#/components/schemas/PickUpPoint"

    CourierDeliveryInfo:
      properties:
        full_address: 
          description: Полный адрес (вместе с регионом и населенным пунктом).
          type: string
          example: Воронежская обл, г Воронеж, Ленинский р-н, ул. Ворошилова, 43
        type:
          $ref: "#/components/schemas/CourierType"

    PickUpPoint:
      properties:
        id: 
          $ref: "#/components/schemas/Id"
        type: 
          $ref: "#/components/schemas/CourierType"
        name: 
          description: Название точки самовывоза
          type: string 
          example: PickPoint ТЦ Европа
        location: 
          $ref: "#/components/schemas/Location"
        delivery_price: 
          $ref: "#/components/schemas/Money" 
        approximate_delivery_time: 
          description: Строковое представление примерного интервала доставки
          type: string
          example: 1-2 дня
        settlement_id: 
          $ref: "#/components/schemas/Id"
      required:
        - id
        - type
        - name
        - location
        - delivery_price
        - approximate_delivery_time
        - settlement_id

    CourierType: 
      type: string
      description: | 
        Тип курьерской службы / пункта выдачи, в который осуществляется доставка.
        Если это внутренняя доставка Rendez-Vous, тип будет `Rendez-Vous`.
      example: "PickPoint" 

    OrderPriceInfo:
      description: Информация о цене заказа. Содержит цену без скидок, цену со скидками, и список всех примененных скидок.
      properties: 
        discounts: 
          type: array
          description: Список скидок на заказ
          items: 
            $ref: "#/components/schemas/OrderDiscount"
        delivery_price:
          $ref: "#/components/schemas/Money"
        retail_sum: 
          $ref: "#/components/schemas/Money"
        discount_sum: 
          $ref: "#/components/schemas/Money"

    OrdersShortResponse:
      properties: 
        orders: 
          type: array
          items: 
            $ref: "#/components/schemas/OrderShort"
        metadata: 
          $ref: "#/components/schemas/Metadata"

    OrderDiscount:
      description: Скидка на заказ 
      properties: 
        name: 
          type: string
        discount: 
          $ref: "#/components/schemas/Money"

    OrderRecipient: 
      description: Получатель заказа
      properties: 
        name: 
          type: string
          description: ФИО получателя
          example: Мария Иванова
        phone: 
          $ref: "#/components/schemas/Phone"
        email: 
          type: string
          description: E-mail получателя
          example: surf@rendez-vous.ru

    OrderStatus: 
      description: |
        Статус заказа. Содержит уникальный код, название и дату, в которую заказ перешел в этот статус.
      properties:
        name: 
          type: string
          description: Краткая расшифровка статуса отзыва
          example: Ждет отправки
        hex_color: 
          type: string 
          description: Значение цвета статуса в HEX-формате
          example: 000000
        date: 
          $ref: "#/components/schemas/Date"
        
    OrderState: 
      type: string
      description: |
        Состояние заказа, необходимое для отображения на ui. 
        Возможные значения: 

        * `in_progress` - заказ в процессе (не завершен и не отменен);
        * `finished` - заказ завершен с успехом (доставлен или выкуплен из магазина);
        * `canceled` - заказ отменен (аннулирован).
      enum: ["in_progress", "finished", "canceled"]
      example: "finished"

    DeliveryType: 
      type: integer
      description: | 
        Тип доставки заказа. 
        
        * 0 - Курьерская доставка по адресу

        * 1 - Доставка в магазин

        * 2 - Доставка в сторонние сервисы (постаматы pickpoint, сдэк, итд)
        
        * 3 - Доставка в пункт выдачи заказов Rendez-Vous.  
      enum: [0,1,2]
      example: 0
    
    PaymentType: 
      type: integer
      description: | 
        Тип оплаты
        
        * 0 - Оплата при получении

        * 1 - Оплата картой онлайн

        * 2 - Оплата Google Pay / Apple Pay
      enum: [0,1,2]
    
    DeliveryTime: 
      description: Время доставки заказа (только для интернет-заказа)
      properties: 
        date: 
          $ref: "#/components/schemas/DateTime"
        time_interval: 
          $ref: "#/components/schemas/TimeInterval"

    OrderCancelReason: 
      type: integer
      description: | 
        Причина отмены заказа

        * 0 - Товар больше не нужен

        * 1 - Скидка не применилась к заказу

        * 2 - Отсутствие подходящей доставки

        * 3 - Заказ создан по ошибке

        * 4 - Другая причина
      enum: [0, 1, 2, 3, 4, 5]

    CancelOrderBody: 
      description: Модель тела отмены заказа
      properties: 
        reason: 
          $ref: "#/components/schemas/OrderCancelReason"

    ReserveProductBody: 
      description: Модель тела резервирования товара 
      properties:
        shop_id: 
          $ref: "#/components/schemas/Id"
        product_size_id:
          $ref: "#/components/schemas/Id" 
        device:
          $ref: "#/components/schemas/Device"

    Purchase: 
        properties:
          product: 
            $ref: "#/components/schemas/ProductShort"
          can_review: 
            type: boolean
            description: Можно ли написать отзыв на товар
          is_returned:
            type: boolean
            description: Был ли товар возвращен в магазин
          buy_info: 
            $ref: "#/components/schemas/BuyInfo"
          repairs:
            $ref: "#/components/schemas/ProductRepairs" 
          my_reviews:
            description: Отзывы, которые текущий пользователь оставил на товар 
            type: array
            items: 
              $ref: "#/components/schemas/Review"

    BuyInfo:
      description: Информация о покупке товара. Содержит в себе цену, за которую товар был куплен, размер и дату покупки.
      properties:  
        buy_price: 
          $ref: "#/components/schemas/Money"
        buy_date: 
          $ref: "#/components/schemas/Date"
        bought_size: 
          $ref: "#/components/schemas/Size"
        
    ProductRepairs: 
      description: Информация о бесплатных ремонтах продукта
      properties: 
        count: 
          type: integer
          description: Количество раз, которое продукт был отремонтирован.
        max: 
          type: integer
          description: Максимальное возможное количество бесплатных ремонтов для товара
  
    PurchasesResponse:
      properties: 
        purchases: 
          type: array
          items: 
            $ref: "#/components/schemas/Purchase"
        metadata: 
          $ref: "#/components/schemas/Metadata"

    Promocode: 
      type: string
      description: Промокод для скидки
      example: "123456"

    CartResponse: 
      properties: 
        products: 
          type: array
          items: 
            $ref: "#/components/schemas/ProductCart"
        price_info: 
          $ref: "#/components/schemas/OrderPriceInfo"
    
    ProductFavoriteRequest:
      description: Данные, необходимые для для добавления товара в избранное
      properties: 
        size_id: 
          $ref: "#/components/schemas/Id"

    ProductCartRequest: 
      description: Данные, необходимые для для добавления товара в корзину 
      properties: 
        size_id: 
          $ref: "#/components/schemas/Id"
        count: 
          type: integer
          description: Количество товаров для добавления в корзину
          example: 1
 
    CreateOrderBody: 
      allOf: 
        - $ref: "#/components/schemas/FavoritesRequestBody"
        - type: object
          properties: 
            promocode: 
              $ref: "#/components/schemas/Promocode"
            recipient: 
              $ref: "#/components/schemas/OrderRecipient"
            payment_type:
              $ref: "#/components/schemas/PaymentType"
            card_info: 
              $ref: "#/components/schemas/FullCardInfo" 
            delivery_info:
              $ref: "#/components/schemas/CreateOrderDeliveryInfo"

    RecalculateOrderRequest: 
      properties:
        promocode:
            $ref: '#/components/schemas/Promocode'
        payment_type:
            $ref: "#/components/schemas/PaymentType"
        delivery_address_id: 
          $ref: "#/components/schemas/Id"
        delivery_courier_id: 
          $ref: "#/components/schemas/Id"
        pick_up_point_id: 
          $ref: "#/components/schemas/Id"
      required:
        - payment_type

    CardDetails: 
      type: string
      description: Зашифрованные данные о кредитной карте (id + cvv либо номер+дата+cvv)
      example: eqew9erfie9greit9irtiieit99rieti924ewad

    FullCardInfo:
      description: Информация о карте. Содержит имя владельца и зашифрованные данные о карте
      properties:
        cardholder_name: 
          type: string
          description: Имя держателя карты транслитом
          example: "IVAN IVANOV"
        card_details: 
          $ref: '#/components/schemas/CardDetails'

    ThreeDsDetails: 
      description: Зашифрованные данные ответа 3D Secure. Содержит MD и PaRes. 
      type: string
      example: "afs7dfdgff7gfh8fhhg"

    CreateOrderDeliveryInfo: 
      properties: 
        type: 
          $ref: "#/components/schemas/DeliveryType"
        time_interval_id: 
          $ref: "#/components/schemas/Id"
        date: 
          $ref: "#/components/schemas/Date"
        address_id: 
          $ref: "#/components/schemas/Id"
        courier_id: 
          $ref: "#/components/schemas/Id"
        shop_id:
          $ref: "#/components/schemas/Id"
        pick_up_point_id:
          $ref: "#/components/schemas/Id"
    
    CourierDeliveryResponse: 
      properties: 
        couriers:
          type: array  
          items:
            $ref: "#/components/schemas/Courier"

    Courier: 
      properties: 
        id: 
          $ref: "#/components/schemas/Id"
        name: 
          type: string
          description: Название курьера
          example: Rendez-vous
        delivery_price: 
          $ref: "#/components/schemas/Money"
        delivery_dates:
          type: array
          description: Список из дат и интервалов доставки для курьерской службы
          items: 
            $ref: "#/components/schemas/DeliveryDate"
    
    DeliveryTimeInterval: 
      allOf: 
        - type: object
          properties :
            id: 
              $ref: "#/components/schemas/Id"
        - $ref: "#/components/schemas/TimeInterval"
    
    DeliveryDate: 
      properties: 
        date: 
          $ref: "#/components/schemas/Date"
        intervals: 
          type: array
          items:  
            $ref: "#/components/schemas/DeliveryTimeInterval"
      
  # Favorites

    FavoritesResponse: 
      properties: 
        favorites: 
          type: array
          items: 
            $ref: "#/components/schemas/ProductSized"

    FavoritesRequestBody: 
      properties: 
        products: 
          type: array
          description: Список объектов данных о товарах для добавления в избранное
          items: 
            $ref: "#/components/schemas/ProductFavoriteRequest"

    CartRequestBody: 
      properties: 
        products_sized: 
          type: array
          description: Список объектов данных о товарах для добавления в корзину
          items: 
            $ref: "#/components/schemas/ProductCartRequest"

  # Content

    ContentResponse: 
      description: | 
        Ответ на запрос контентного экрана. 
        Содержит текст в HTML-верстке, который будет стилизован на клиенте. 
      properties: 
        content: 
          type: string
          example: 
                      <h1>Заголовок h1</h1><h2>Заголовок h2</h2><h3>Заголовок
                      h3</h3><p>Стандартный текст</p><p><b>Жирный
                      текст</b></p><p><i>Курсивный
                      текст</i></p><a>Гиперссылка</a><ul><li>Список
                      1</li><li>Список 2</li><li>Список
                      3</li></ul><ol><li>Список 1</li><li>Список
                      2</li><li>Список 3</li></ol>


  # Common

    Id: 
      description: Уникальный идентификатор
      type: string

    Date: 
      description: | 
        Дата в формате ISO 8601: yyyy-MM-dd
      type: string
      example: "2017-09-02"

    Time: 
      description: | 
        Время в формате ISO 8601: hh:mm
      type: string
      example: "18:42"

    TimeInterval: 
      description: Временной интервал, содержит верхнюю и нижнюю временные границы.
      properties: 
        from:
          $ref: "#/components/schemas/Time" 
        to: 
          $ref: "#/components/schemas/Time"

    DateTime: 
      type: string 
      description: | 
        Дата и время в расширенном формате ISO 8601: YYYY-MM-DDThh:mm:ss[.sss]. 
        Время присылается строго в UTC, и приводится к необходимому часовому поясу на клиенте.
      example: "2005-08-09T18:31:42.201"  

    Money: 
      type: string
      example: "5999.0000"

    Metadata: 
      description: Мета-данные для пагинации
      properties:
        offset: 
          type: integer
          description: Текущий сдвиг пачки на пагинации
          example: 0
        limit: 
          type: integer
          description: Размер одной пачки пагинации
          example: 20
        count: 
          type: integer 
          description: Общий размер списка
          example: 20

    MetadataResponse: 
      description: Ответ с мета-данными для пагинации
      properties:
        metadata: 
          $ref: "#/components/schemas/Metadata"
    
    Picture: 
      properties: 
        url: 
          type: string
          description: Url-адрес картинки 
          example: "https://static.rendez-vous.ru/files/catalog_models/resize_640x630/9/"
        width: 
          type: integer
          description: Ширина картинки
          example: 640
        height: 
          type: integer
          description: Высота картинки
          example: 640

    Phone: 
      type: string
      description: Телефон
      example: "79001234567"
    Email: 
      type: string
      description: Email пользователя
      example: user@rendez-vous.ru

  parameters:
    id: 
      name: id
      in: path
      required: true
      description: Уникальный идентификатор
      schema:
        $ref: '#/components/schemas/Id'
    id_query: 
      name: id
      in: query
      required: true
      description: Уникальный идентификатор
      schema:
        $ref: '#/components/schemas/Id'
    size_id: 
      name: id
      in: path
      required: true
      description: Уникальный идентификатор размера товара
      schema:
        $ref: '#/components/schemas/Id'
    section: 
      name: section
      in: query
      required: true
      description: | 
        Секция каталога. 
        Представляет из себя группу товаров, объединенных по какому-то общему признаку. 
        Секция может быть списком с товарами, сгруппированными по параметрам (Например, Женские кроссовки), 
        может быть списком акционных товаров (Осенняя распродажа), или списком с коллекцией товаров, формируемых на стороне сервера (Зимняя коллекция)
      schema:
        type: string
        example: female                   
    section_unrequired: 
      name: section
      in: query
      required: false
      description: | 
        Секция каталога. 
        Представляет из себя группу товаров, объединенных по какому-то общему признаку. 
        Секция может быть списком с товарами, сгруппированными по параметрам (Например, Женские кроссовки), 
        может быть списком акционных товаров (Осенняя распродажа), или списком с коллекцией товаров, формируемых на стороне сервера (Зимняя коллекция)
      schema:
        type: string
        example: female
    collection_id:
      name: collection_id
      in: query
      required: false 
      description: | 
        Имя коллекции. Является аналогом lifestyle из веб-сайта.
      schema: 
        type: string
        example: winter__sale
    latitude: 
      name: lat 
      in: query
      required: true
      description: Широта из позиции пользователя
      schema: 
        type: string
    longitude:        
      name: long 
      in: query
      required: true
      description: Долгота из позиции пользователя
      schema: 
        type: string
    node: 
      name: node
      in: query
      required: true
      description: | 
        Базовый раздел каталога. Может иметь одно из трех значений: Женщинам, Мужчинам или Детям
      schema:
        type: string
        enum: ["female", "male", "child"]
        example: female                   
    limit: 
      name: limit
      in: query
      description: Размер пачки пагинации
      schema:
        type: integer
    offset:
      name: offset
      in: query
      description: Сдвиг пагинации
      schema:
        type: integer
    sort_type: 
      name: sort_type 
      in: query
      description: | 
        Тип сортировки ленты. Возможные типы сортировки: 
        * По популярности
        * По актуальности (новые товары вверху)
        * По цене (возрастание)
        * По цене (убывание)
        * По скидке 
        * По рейтингу

      schema:
        enum: ["popular", "new", "price_asc", "price_desc", "discount", "rating"] 
        type: string
    search_sort_type:  
      name: sort_type 
      in: query
      description: | 
        Тип сортировки ленты с поиском. Возможные типы сортировки: 
        * Дефолтный (по наилучшему соответствию)
        * По цене (возрастание)
        * По цене (убывание)
      schema:
        enum: ["default", "price_asc", "price_desc"] 
        type: string
    term_required:
      name: term
      in: query
      required: true
      description: Поисковый запрос
      schema:
        type: string
    term:
      name: term
      in: query
      required: false
      description: Поисковый запрос
      schema:
        type: string
    brand:
      name: brand_id
      in: query
      description: Идентификатор бренда
      required: false
      schema: 
        type: string     
    unauthorized_sized_products_ids:
      name: product_ids
      in: query
      description: | 
        Массив идентификаторов размеров товаров, 
        отсылаемый пользователем без авторизации, 
        для получения сведений о своей корзине/избранном. 

        Необходим для того, чтобы поддерживать товары даже неавторизованного пользователя в актуальном состоянии. 
      explode: false
      schema:
        type: array
        items: 
          $ref: '#/components/schemas/Id'
        example: ["2379377", "2379034"]

    settlement_delivery_type: 
      name: delivery_type
      in: query
      required: true
      description: | 
        Тип доставки, для которого происходит получение населенных пунктов
          * `pick_up_points` - пункты самовывоза
      schema: 
        type: string 
        example: pick_up_points
        enum: ["pick_up_points"]

    shop_type: 
      name: shop_type
      in: query 
      required: false
      description: | 
        Фича, для которой мы будем получать города и магазины. 
        По-умолчанию, это фича "Магазины".
        Возможные значения: 

        * `shops` - магазины Rendez-Vous.
        * `pick_ups_rendezvous` - пункты выдачи заказов Rendez-Vous.
      schema:
        type: string
        enum: ["shops", "pick_ups_rendezvous"]
        example: "shops"
        default: "shops"

  responses: 
    NoContent:
      description: Пустой положительный ответ

    Unauthorized: 
      description: Ошибка авторизации. Нет доступа к странице
    
    DataNotFound: 
      description: Данные не найдены
    
    NotModified:
      description: Данные не изменились

  securitySchemes:
    AuthApiKey:
      description: Ключ авторизованного пользователя
      type: apiKey
      in: header
      name: Authorization    
